// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantOnlineBookingApp.Data;

#nullable disable

namespace RestaurantOnlineBookingApp.Data.Migrations
{
    [DbContext(typeof(RestaurantBookingDbContext))]
    [Migration("20240610163530_UpdateDbSeeder")]
    partial class UpdateDbSeeder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasDefaultValue("Name1");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasDefaultValue("Name2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("faf6dc41-ce01-44a9-b63c-0abd2df2d15f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "380bd0dd-8bdd-426b-b056-2e8a4c249227",
                            Email = "kiril@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Kiril",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "kiril@mail.com",
                            NormalizedUserName = "kiril@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEGPquHZMA7zfzgsu5fxR9Erw3QZOl0JEJKtLUlLsISAKxYofRnve8IMbbfYcpMLqIQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kiril@mail.com"
                        },
                        new
                        {
                            Id = new Guid("8099b56d-7710-415d-9c06-4569082c6758"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e2698ba-910c-4afd-a1e0-db17656bcbff",
                            Email = "ivan@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "ivan@mail.com",
                            NormalizedUserName = "ivan@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEKke0ih0OggX8odq8jq++ZHAekd61t4qHu7BZIs3HTs06Pc3EIvoNdI5lhYENA/TmQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "ivan@mail.com"
                        });
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("ReservedTime")
                        .HasColumnType("time");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.CapacityPerDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("CapacitiesParDate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 16, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 14,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 15,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 16,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 17,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 18,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 19,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 20,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 21,
                            Capacity = 100,
                            Date = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 22,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 23,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 24,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 25,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 26,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 27,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 28,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 29,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 30,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 31,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 32,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 33,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 34,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 35,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 36,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 37,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 16, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 38,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 39,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 40,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 19, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 41,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 42,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 43,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 44,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 45,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 46,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 47,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 48,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 49,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 50,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 51,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 52,
                            Capacity = 100,
                            Date = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 53,
                            Capacity = 100,
                            Date = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 54,
                            Capacity = 100,
                            Date = new DateTime(2024, 8, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 55,
                            Capacity = 100,
                            Date = new DateTime(2024, 8, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 56,
                            Capacity = 100,
                            Date = new DateTime(2024, 8, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 57,
                            Capacity = 100,
                            Date = new DateTime(2024, 8, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 58,
                            Capacity = 100,
                            Date = new DateTime(2024, 8, 6, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 59,
                            Capacity = 100,
                            Date = new DateTime(2024, 8, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 60,
                            Capacity = 100,
                            Date = new DateTime(2024, 8, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        });
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Family"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Buffet"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Coffee house"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mediterranean"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Desert House"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Indian"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Lebanese"
                        });
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            CityName = "Plovdiv"
                        },
                        new
                        {
                            Id = 3,
                            CityName = "Varna"
                        },
                        new
                        {
                            Id = 4,
                            CityName = "Burgas"
                        });
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98ff6720-bf93-4fe0-931e-b8fbac9917d9"),
                            Date = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Description for Special Event 1",
                            ImageUrl = "https://www.eventbookings.com/wp-content/uploads/2018/03/event-ideas-for-party-eventbookings.jpg",
                            Price = 50.00m,
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f"),
                            Time = new TimeSpan(0, 18, 0, 0, 0),
                            Title = "Special Event 1"
                        });
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Meals");

                    b.HasData(
                        new
                        {
                            Id = 12,
                            Description = "Italian pizza with cheese and peperoni",
                            ImageUrl = "https://www.simplyrecipes.com/thmb/KE6iMblr3R2Db6oE8HdyVsFSj2A=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/__opt__aboutcom__coeus__resources__content_migration__simply_recipes__uploads__2019__09__easy-pepperoni-pizza-lead-3-1024x682-583b275444104ef189d693a64df625da.jpg",
                            Name = "Pizza Peperoni",
                            Price = 10.50m,
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        },
                        new
                        {
                            Id = 14,
                            Description = "Chinese chicken fried rice with eggs",
                            ImageUrl = "https://tildaricelive.s3.eu-central-1.amazonaws.com/wp-content/uploads/2021/05/04111234/chicken-fried-rice-low-res-2.png",
                            Name = "Chicken Fried Rice",
                            Price = 9.20m,
                            RestaurantId = new Guid("3614f373-2355-4e6c-96e5-542f0689752f")
                        });
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44e7b2ef-dfa8-45ae-aca9-0b52b9a3df4d"),
                            PhoneNumber = "+359888888888",
                            UserId = new Guid("faf6dc41-ce01-44a9-b63c-0abd2df2d15f")
                        });
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<TimeSpan>("EndingTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("GuestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartingTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("GuestId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3614f373-2355-4e6c-96e5-542f0689752f"),
                            Address = "Georgi Georgiev 66",
                            Capacity = 100,
                            CategoryId = 1,
                            CityId = 2,
                            Description = "Family restaurant with italian food",
                            EndingTime = new TimeSpan(0, 23, 45, 0, 0),
                            ImageUrl = "https://www.japan-guide.com/g21/2036_family_01.jpg",
                            IsActive = true,
                            Name = "Restaurant Italy",
                            OwnerId = new Guid("44e7b2ef-dfa8-45ae-aca9-0b52b9a3df4d"),
                            StartingTime = new TimeSpan(0, 12, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.RestaurantGuest", b =>
                {
                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RestaurantId", "GuestId");

                    b.HasIndex("GuestId");

                    b.ToTable("RestaurantGuest");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReviewRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.UserFavoritesRestaurants", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RestaurantId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("UserFavoriteRestaurants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Booking", b =>
                {
                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.AppUser", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.Restaurant", "Restaurant")
                        .WithMany("Bookings")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.CapacityPerDate", b =>
                {
                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.Restaurant", "Restaurant")
                        .WithMany("CapacityPerDates")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Event", b =>
                {
                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Meal", b =>
                {
                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.Restaurant", "Restaurant")
                        .WithMany("Meals")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Owner", b =>
                {
                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Photo", b =>
                {
                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.Restaurant", "Restaurant")
                        .WithMany("Photos")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Restaurant", b =>
                {
                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.Category", "Category")
                        .WithMany("Restaurants")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.City", "City")
                        .WithMany("Restaurants")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.AppUser", "Guest")
                        .WithMany("FavoriteRestaurants")
                        .HasForeignKey("GuestId");

                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.Owner", "Owner")
                        .WithMany("OwnedRestaurants")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Guest");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.RestaurantGuest", b =>
                {
                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.AppUser", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.Restaurant", "Restaurant")
                        .WithMany("RestaurantGuests")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Review", b =>
                {
                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.AppUser", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.UserFavoritesRestaurants", b =>
                {
                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RestaurantOnlineBookingApp.Data.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.AppUser", b =>
                {
                    b.Navigation("FavoriteRestaurants");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Category", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.City", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Owner", b =>
                {
                    b.Navigation("OwnedRestaurants");
                });

            modelBuilder.Entity("RestaurantOnlineBookingApp.Data.Models.Restaurant", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CapacityPerDates");

                    b.Navigation("Meals");

                    b.Navigation("Photos");

                    b.Navigation("RestaurantGuests");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
